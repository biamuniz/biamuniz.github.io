americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-10, 10)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-10, 10)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-10, 10)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-5, 10)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-5, 5)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-5, 5)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-5, 5)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-5, 5)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = TRUE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-20, 20)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-20, 20)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-20, 20)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-30, 30)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-20, 20)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-25, 25)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-20, 20)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-25, 25)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-20, 20)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-25, 25)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
#| message: false
#| warning: false
#selecionando as colunas de interesse e filtrando o período que eu vou analisar
temp_clean <- temp |>
select(
date,
tmax,
tmin
) |>
filter(
date > "2022-09-06")
temp_clean |>
write_rds("data-processed/01-weather.rds")
temp_clean$date <- as.Date(temp_clean$date, format = "%Y-%m-%d")
# Encontrar a data mínima e máxima para criar uma sequência de primeiros dias de cada mês.
temp_range <- range(temp_clean$date, na.rm = TRUE)
start_dates <- seq(from = floor_date(min(temp_range), "month"),
to = ceiling_date(max(temp_range), "month"),
by = "1 month")
# Supondo que 'temp_clean' já está com 'date' no formato Date
# Encontrar os dias com os valores desejados
dia_com_menor_temperatura <- temp_clean %>% filter(tmin == min(tmin))
dia_com_maior_temperatura <- temp_clean %>% filter(tmax == max(tmax))
dia_com_maior_amplitude <- temp_clean %>% mutate(amplitude = tmax - tmin) %>% filter(amplitude == max(amplitude))
# Cria o gráfico
figura <- ggplot(temp_clean, aes(x = date)) +
geom_segment(aes(x = date, xend = date, y = tmin, yend = tmax)) +
geom_point(aes(y = tmin), color = "lightblue", size = 1) +
geom_point(aes(y = tmax), color = "orange", size = 1) +
bbc_style() +
labs(title = "Põe o casaco, tira o casaco",
subtitle = "Registros de temperaturas mínima e máxima em cada \ndia que estive em Austin, capital do Texas",
x = "Dia",
y = "Temperatura (°C)") +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
geom_vline(data = data.frame(date = seq(min(temp_clean$date), max(temp_clean$date), by = "1 month")),
aes(xintercept = date), linetype = "dashed", color = "gray") +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = -1, size = 10))
# Após a construção do objeto figura, você pode exibi-lo ou salvá-lo.
# Adicionar anotações com setas
figura +
annotate("text", x = dia_com_menor_temperatura$date, y = min(temp_clean$tmin) - 5, label = "Menor temperatura aconteceu \nno outono: dia 13/11, 1°C", hjust = 0, vjust = 0, size = 3, color = "black") +
annotate("text", x = dia_com_maior_temperatura$date, y = max(temp_clean$tmax) + 5, label = "O dia mais quente: \n22/09, 37°C", hjust = 1, vjust = 0.3, size = 3, color = "black") +
annotate("text", x = dia_com_maior_amplitude$date, y = max(temp_clean$tmax) + 10, label = "No dia 20/10 encarei uma diferença de 20°C \nentre as temperaturas mínima e máxima!", hjust = 0.5, vjust = 1, size = 3, color = "black") +
geom_curve(aes(x = dia_com_menor_temperatura$date, y = min(temp_clean$tmin), xend = dia_com_menor_temperatura$date, yend = min(temp_clean$tmin) - 2),
arrow = arrow(length = unit(0.1, "cm")), color = "black") +
geom_curve(aes(x = dia_com_maior_temperatura$date, y = max(temp_clean$tmax), xend = dia_com_maior_temperatura$date, yend = max(temp_clean$tmax) + 8),
arrow = arrow(length = unit(0.1, "cm")), color = "black") +
geom_curve(aes(x = dia_com_maior_amplitude$date, y = (max(temp_clean$tmax) + min(temp_clean$tmin)) / 2, xend = dia_com_maior_amplitude$date, yend = max(temp_clean$tmax) + 4),
arrow = arrow(length = unit(0.1, "cm")), color = "black")
#Carregando os pacotes
library(tidyverse) #para lidar com os dados (ggplot tá aí!)
library(lubridate) #para lidar com as datas
library(weathermetrics) #para converter a temperatura
library(janitor) #clean_names
library(ggthemes) #outros temas
library(bbplot) #outros temas
#Carregando os dados
## Temperatura
temp <- read.csv2("data-raw/3180668.csv",sep=',') |>
clean_names()
## Câmbio
moeda <- read_csv("data-raw/USD_BRL Historical Data.csv") |>
clean_names()
## Scrobbles no Last.fm
lastfm <- read_csv("data-raw/lastfm.csv",
col_types = cols(date = col_date(format = "%d/%m/%Y"), ))
## Localização de aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
## Lugares favoritos
library(ggplot2)
library(dplyr)
library(lubridate)
library(rnaturalearth)
# Dados dos aeroportos
aeroportos <- data.frame(
nome = c("GRU", "PTY", "Houston", "Austin"),
lat = c(-23.435556, 9.071364, 29.990220, 30.197429),
lon = c(-46.473056, -79.383453, -95.341442, -97.666306),
chegada = c(NA, "2023-01-01 10:00", "2023-01-01 16:00", "2023-01-01 18:30"),
saida = c("2023-01-01 08:00", "2023-01-01 12:00", "2023-01-01 17:00", NA)
)
# Processamento de dados
aeroportos <- aeroportos %>%
mutate(
chegada = ymd_hm(chegada),
saida = ymd_hm(saida)
) %>%
mutate(duracao = as.numeric(difftime(chegada, saida, units = "hours")))
# Corrigindo a estrutura de dados para rotas
rotas <- data.frame(
lat = c(rbind(aeroportos$lat[-nrow(aeroportos)], aeroportos$lat[-1])),
lon = c(rbind(aeroportos$lon[-nrow(aeroportos)], aeroportos$lon[-1]))
)
# Obter dados geográficos do mapa das Américas
americas <- ne_countries(continent = c("south america", "central america", "north america"), returnclass = "sf")
xlim <- range(aeroportos$lon) + c(-20, 20)  # Ajustando um pouco além dos limites para visualização
ylim <- range(aeroportos$lat) + c(-25, 25)
# Desenhar o mapa
ggplot() +
geom_sf(data = americas, fill = "gray", color = "white") +  # Base do mapa das Américas
geom_line(data = rotas, aes(x = lon, y = lat), color = 'red', linewidth = 0.3) +  # Linhas entre os pontos
geom_point(data = aeroportos, aes(x = lon, y = lat), color = 'black', size = 0.8) +  # Pontos dos aeroportos
labs(title = 'TÍTULOOOOOO') +  # Título do mapa
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +  # Ajustar a visualização
theme_void()  # Remover grade e elementos desnecessários
#  theme_clean()  # Tema do gráfico
#| message: false
#| warning: false
# converte os dados de fahrenheit para celsius
temp$tmin <- fahrenheit.to.celsius(temp$tmin)
temp$tmax <- fahrenheit.to.celsius(temp$tmax)
# uma olhadinha nos dados
temp  |>
glimpse()
#| message: false
#| warning: false
#selecionando as colunas de interesse e filtrando o período que eu vou analisar
temp_clean <- temp |>
select(
date,
tmax,
tmin
) |>
filter(
date > "2022-09-06")
temp_clean |>
write_rds("data-processed/01-weather.rds")
temp_clean$date <- as.Date(temp_clean$date, format = "%Y-%m-%d")
# Encontrar a data mínima e máxima para criar uma sequência de primeiros dias de cada mês.
temp_range <- range(temp_clean$date, na.rm = TRUE)
start_dates <- seq(from = floor_date(min(temp_range), "month"),
to = ceiling_date(max(temp_range), "month"),
by = "1 month")
# Supondo que 'temp_clean' já está com 'date' no formato Date
# Encontrar os dias com os valores desejados
dia_com_menor_temperatura <- temp_clean %>% filter(tmin == min(tmin))
dia_com_maior_temperatura <- temp_clean %>% filter(tmax == max(tmax))
dia_com_maior_amplitude <- temp_clean %>% mutate(amplitude = tmax - tmin) %>% filter(amplitude == max(amplitude))
# Cria o gráfico
figura <- ggplot(temp_clean, aes(x = date)) +
geom_segment(aes(x = date, xend = date, y = tmin, yend = tmax)) +
geom_point(aes(y = tmin), color = "lightblue", size = 1) +
geom_point(aes(y = tmax), color = "orange", size = 1) +
bbc_style() +
labs(title = "Põe o casaco, tira o casaco",
subtitle = "Registros de temperaturas mínima e máxima em cada \ndia que estive em Austin, capital do Texas",
x = "Dia",
y = "Temperatura (°C)") +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
geom_vline(data = data.frame(date = seq(min(temp_clean$date), max(temp_clean$date), by = "1 month")),
aes(xintercept = date), linetype = "dashed", color = "gray") +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = -1, size = 10))
# Após a construção do objeto figura, você pode exibi-lo ou salvá-lo.
# Adicionar anotações com setas
figura +
annotate("text", x = dia_com_menor_temperatura$date, y = min(temp_clean$tmin) - 5, label = "Menor temperatura aconteceu \nno outono: dia 13/11, 1°C", hjust = 0, vjust = 0, size = 3, color = "black") +
annotate("text", x = dia_com_maior_temperatura$date, y = max(temp_clean$tmax) + 5, label = "O dia mais quente: \n22/09, 37°C", hjust = 1, vjust = 0.3, size = 3, color = "black") +
annotate("text", x = dia_com_maior_amplitude$date, y = max(temp_clean$tmax) + 10, label = "No dia 20/10 encarei uma diferença de 20°C \nentre as temperaturas mínima e máxima!", hjust = 0.5, vjust = 1, size = 3, color = "black") +
geom_curve(aes(x = dia_com_menor_temperatura$date, y = min(temp_clean$tmin), xend = dia_com_menor_temperatura$date, yend = min(temp_clean$tmin) - 2),
arrow = arrow(length = unit(0.1, "cm")), color = "black") +
geom_curve(aes(x = dia_com_maior_temperatura$date, y = max(temp_clean$tmax), xend = dia_com_maior_temperatura$date, yend = max(temp_clean$tmax) + 8),
arrow = arrow(length = unit(0.1, "cm")), color = "black") +
geom_curve(aes(x = dia_com_maior_amplitude$date, y = (max(temp_clean$tmax) + min(temp_clean$tmin)) / 2, xend = dia_com_maior_amplitude$date, yend = max(temp_clean$tmax) + 4),
arrow = arrow(length = unit(0.1, "cm")), color = "black")
