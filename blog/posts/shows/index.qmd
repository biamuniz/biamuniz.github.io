---
title: "Tentando dataficar todos os shows que vi desde 2013"
subtitle: "testando visualizações e escolhas do meio do caminho"
date: "2024-07-21"
categories: 
# exemplo de categorias:
  - "Pessoal"
  - "Dados"
lang: pt
#toc: true 
image: "tcc_capa.png"
execute: 
  warning: false
  message: false
draft: true
---

```{r}
# Carregar o pacote
library(googlesheets4)
library(tidyverse)
library(janitor)
library(plotly)
library(treemapify)
library(png)
library(ggplot2)
library(grid)
library(ggplotify)


# URL da planilha ou ID
sheet_url <- "https://docs.google.com/spreadsheets/d/1tgWGanTiCr9tgHTd34MnDQ8gt0yDATghi-OoemokdJY/edit#gid=0"

# Ler a planilha
df <- read_sheet(sheet_url) |> clean_names()
# Supondo que df já esteja carregado e contém as colunas: ano, show, local
data_selected <- df %>% select(ano, show, local) |> group_by(show) |> summarise(quantidade=n())

```

## Criando um sunburst

```{r}
# Ordenar os dados explicitamente por ano, show e local antes de criar os ids
data_sunburst <- df %>%
  mutate(ano = factor(ano, levels = sort(unique(ano), decreasing = FALSE))) %>%  # Ordenação crescente por ano
  group_by(ano, show, local) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  mutate(
    ids = paste0(ano, ": ", show, " @", local),
    parents = paste0(ano, ": ", show)
  )

# Criar as hierarquias intermediárias e de nível superior
sunburst_data <- bind_rows(
  data_sunburst,
  df %>% 
    mutate(ano = factor(ano, levels = sort(unique(ano), decreasing = FALSE))) %>%  # Ordenação crescente por ano
    group_by(ano, show) %>%
    summarise(count = n()) %>%
    ungroup() %>%
    mutate(
      ids = paste0(ano, ": ", show),
      parents = as.character(ano)
    ),
  df %>%
    mutate(ano = factor(ano, levels = sort(unique(ano), decreasing = FALSE))) %>%  # Ordenação crescente por ano
    group_by(ano) %>%
    summarise(count = n()) %>%
    ungroup() %>%
    mutate(
      ids = as.character(ano),
      parents = ""
    )
)

# Criar o gráfico sunburst
sunburst_plot <- plot_ly(
  labels = sunburst_data$ids,
  parents = sunburst_data$parents,
  values = sunburst_data$count,
  type = 'sunburst',
  branchvalues = 'total'
)

fig <- sunburst_plot %>%
  layout(
    grid = list(columns =2, rows = 1),
    margin = list(l = 0, r = 0, b = 0, t = 0),
    sunburstcolorway = c(
      "#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
      "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
    ),
    extendsunburstcolors = TRUE
  )

# Exibir o gráfico
fig


```

```{r}
data_treemap <- df %>%
  group_by(ano, show, local) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  mutate(
    ids = paste0(ano, ": ", show, " @", local),
    parents = paste0(ano, ": ", show)
  )

# Adicionar uma linha para cada nível da hierarquia
treemap_data <- data_treemap %>%
  bind_rows(
    df %>% 
      group_by(ano, show) %>%
      summarise(count = n()) %>%
      mutate(
        ids = paste0(ano, ": ", show),
        parents = as.character(ano)
      ),
    df %>%
      group_by(ano) %>%
      summarise(count = n()) %>%
      mutate(
        ids = as.character(ano),
        parents = ""
      )
  ) %>%
  arrange(ids) # Ordenar os rótulos para garantir a ordem dos anos

# Criar o gráfico treemap
treemap_plot <- plot_ly(
  labels = treemap_data$ids,
  parents = treemap_data$parents,
  values = treemap_data$count,
  type = 'treemap',
  branchvalues = 'total'
)
treemap_plot %>%
    layout(
      margin = list(l = 0, r = 0, b = 0, t = 0),
      treemapcolorway = c(
        "#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
        "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
      ),
      extendtreemapcolors = TRUE)
```

```{r}
df <- read_sheet(sheet_url)|> clean_names()
df <- df %>%
  mutate(ano = ifelse(fav == "SIM", paste0("*", ano), ano))


# Agrupa os dados por show, nacionalidade e anos
data_selected <- df |> 
  group_by(show, internacional) |>
  summarise(
    quantidade = n(),
    anos = paste(ano, collapse = "\n")
  )
data_selected$image_path<- "ticket.png"
# Carrega a imagem de fundo
img <- readPNG("ticket.png")

background <- rasterGrob(img, width = unit(1, "npc"), height = unit(1, "npc"))



# Cria o gráfico com a imagem de fundo e as cores baseadas na internacional
plot <- ggplot(data_selected, aes(area = quantidade, fill = internacional, label = paste0("     ",show), subgroup = anos)) +
  annotation_custom(
    background,
    xmin = -Inf,
    xmax = Inf,
    ymin = -Inf,
    ymax = Inf
  ) + 
  geom_treemap(
    color = "white", 
    size = 4, 
    alpha = 0.9
  ) +
  geom_treemap_text(
    aes(label = toupper(show)), # Nome do show no topo esquerdo
    colour = "#000000",
    place = "topleft",
    reflow = TRUE,
    size = 11,
    min.size = 4,
    family = "OCR A Std",
    angle = 0
  ) +
  scale_fill_manual(values = c("NACIONAL" = "beige", "INTERNACIONAL" = "lightblue")) +  # Bege e cinza
  geom_treemap_text(
    aes(label = anos), # Anos no canto inferior direito
    colour = "#000000",
    place = "bottomright",
    reflow = TRUE,
    size = 6,
    min.size = 6,
    family = "OCR A Std",
    angle = 0) +

  labs(
    title = "TODOS OS SHOWS QUE VI DESDE 2013",
    subtitle = paste0("Cada retângulo simboliza um artista que vi ao vivo; \nsua área é proporcional à quantidade de shows vistos e \nsua cor indica se é um artista nacional ou internacional"),
    caption = "@biancmuniz\nAtualizado em: 17/08/2024"
  ) +
  theme_void() +
  theme(
    legend.position = "none",
    plot.background = element_rect(fill = "white", colour = "#000000"),
    plot.margin = margin(10, 20, 10, 20),
    plot.title = element_text(family = "OCRABold", size = 16),
   plot.subtitle = element_text(family = "OCR A Std", size = 12),
  plot.caption = element_text(family = "OCR A Std", size = 10)
  )
```
